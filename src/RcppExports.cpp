// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// makeSimmapMappedEdge
arma::mat makeSimmapMappedEdge(arma::uword n_nodes, arma::uword n_tips, arma::uword n_states, arma::vec edge_len, arma::mat edge_mat, arma::vec parents, arma::mat X, arma::mat Q, int root_node, bool root_type, int sims_limit);
RcppExport SEXP _ratematrix_makeSimmapMappedEdge(SEXP n_nodesSEXP, SEXP n_tipsSEXP, SEXP n_statesSEXP, SEXP edge_lenSEXP, SEXP edge_matSEXP, SEXP parentsSEXP, SEXP XSEXP, SEXP QSEXP, SEXP root_nodeSEXP, SEXP root_typeSEXP, SEXP sims_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n_nodes(n_nodesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_tips(n_tipsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_states(n_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edge_len(edge_lenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type edge_mat(edge_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type root_node(root_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type root_type(root_typeSEXP);
    Rcpp::traits::input_parameter< int >::type sims_limit(sims_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSimmapMappedEdge(n_nodes, n_tips, n_states, edge_len, edge_mat, parents, X, Q, root_node, root_type, sims_limit));
    return rcpp_result_gen;
END_RCPP
}
// makeSimmapMaps
arma::mat makeSimmapMaps(arma::uword n_nodes, arma::uword n_tips, arma::uword n_states, arma::vec edge_len, arma::mat edge_mat, arma::vec parents, arma::mat X, arma::mat Q, int root_node, bool root_type, int max_nshifts);
RcppExport SEXP _ratematrix_makeSimmapMaps(SEXP n_nodesSEXP, SEXP n_tipsSEXP, SEXP n_statesSEXP, SEXP edge_lenSEXP, SEXP edge_matSEXP, SEXP parentsSEXP, SEXP XSEXP, SEXP QSEXP, SEXP root_nodeSEXP, SEXP root_typeSEXP, SEXP max_nshiftsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n_nodes(n_nodesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_tips(n_tipsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_states(n_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edge_len(edge_lenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type edge_mat(edge_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type root_node(root_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type root_type(root_typeSEXP);
    Rcpp::traits::input_parameter< int >::type max_nshifts(max_nshiftsSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSimmapMaps(n_nodes, n_tips, n_states, edge_len, edge_mat, parents, X, Q, root_node, root_type, max_nshifts));
    return rcpp_result_gen;
END_RCPP
}
// logLikMk_C
double logLikMk_C(arma::uword n_nodes, arma::uword n_tips, arma::uword n_states, arma::vec edge_len, arma::mat edge_mat, arma::vec parents, arma::mat X, arma::mat Q, int root_node, int root_type);
RcppExport SEXP _ratematrix_logLikMk_C(SEXP n_nodesSEXP, SEXP n_tipsSEXP, SEXP n_statesSEXP, SEXP edge_lenSEXP, SEXP edge_matSEXP, SEXP parentsSEXP, SEXP XSEXP, SEXP QSEXP, SEXP root_nodeSEXP, SEXP root_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n_nodes(n_nodesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_tips(n_tipsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_states(n_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type edge_len(edge_lenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type edge_mat(edge_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type root_node(root_nodeSEXP);
    Rcpp::traits::input_parameter< int >::type root_type(root_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikMk_C(n_nodes, n_tips, n_states, edge_len, edge_mat, parents, X, Q, root_node, root_type));
    return rcpp_result_gen;
END_RCPP
}
// logLikPrunningMCMC_C
double logLikPrunningMCMC_C(arma::mat X, arma::uword k, arma::uword p, arma::vec nodes, arma::uvec des, arma::uvec anc, arma::uvec names_anc, arma::mat mapped_edge, arma::cube R, arma::vec mu);
RcppExport SEXP _ratematrix_logLikPrunningMCMC_C(SEXP XSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nodesSEXP, SEXP desSEXP, SEXP ancSEXP, SEXP names_ancSEXP, SEXP mapped_edgeSEXP, SEXP RSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type des(desSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type anc(ancSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type names_anc(names_ancSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mapped_edge(mapped_edgeSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikPrunningMCMC_C(X, k, p, nodes, des, anc, names_anc, mapped_edge, R, mu));
    return rcpp_result_gen;
END_RCPP
}
// runRatematrixMCMC_C
std::string runRatematrixMCMC_C(arma::mat X, int k, int p, arma::vec nodes, arma::uvec des, arma::uvec anc, arma::uvec names_anc, arma::mat mapped_edge, arma::cube R, arma::vec mu, arma::mat sd, arma::cube Rcorr, arma::vec w_mu, arma::mat par_prior_mu, std::string den_mu, arma::mat w_sd, arma::mat par_prior_sd, std::string den_sd, arma::vec nu, arma::cube sigma, arma::vec v, std::string log_file, std::string mcmc_file, double prob_sample_root, double prob_sample_sd, int gen, arma::vec post_seq, int write_header);
RcppExport SEXP _ratematrix_runRatematrixMCMC_C(SEXP XSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nodesSEXP, SEXP desSEXP, SEXP ancSEXP, SEXP names_ancSEXP, SEXP mapped_edgeSEXP, SEXP RSEXP, SEXP muSEXP, SEXP sdSEXP, SEXP RcorrSEXP, SEXP w_muSEXP, SEXP par_prior_muSEXP, SEXP den_muSEXP, SEXP w_sdSEXP, SEXP par_prior_sdSEXP, SEXP den_sdSEXP, SEXP nuSEXP, SEXP sigmaSEXP, SEXP vSEXP, SEXP log_fileSEXP, SEXP mcmc_fileSEXP, SEXP prob_sample_rootSEXP, SEXP prob_sample_sdSEXP, SEXP genSEXP, SEXP post_seqSEXP, SEXP write_headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type des(desSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type anc(ancSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type names_anc(names_ancSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mapped_edge(mapped_edgeSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Rcorr(RcorrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w_mu(w_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type par_prior_mu(par_prior_muSEXP);
    Rcpp::traits::input_parameter< std::string >::type den_mu(den_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type w_sd(w_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type par_prior_sd(par_prior_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type den_sd(den_sdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< std::string >::type log_file(log_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmc_file(mcmc_fileSEXP);
    Rcpp::traits::input_parameter< double >::type prob_sample_root(prob_sample_rootSEXP);
    Rcpp::traits::input_parameter< double >::type prob_sample_sd(prob_sample_sdSEXP);
    Rcpp::traits::input_parameter< int >::type gen(genSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type post_seq(post_seqSEXP);
    Rcpp::traits::input_parameter< int >::type write_header(write_headerSEXP);
    rcpp_result_gen = Rcpp::wrap(runRatematrixMCMC_C(X, k, p, nodes, des, anc, names_anc, mapped_edge, R, mu, sd, Rcorr, w_mu, par_prior_mu, den_mu, w_sd, par_prior_sd, den_sd, nu, sigma, v, log_file, mcmc_file, prob_sample_root, prob_sample_sd, gen, post_seq, write_header));
    return rcpp_result_gen;
END_RCPP
}
// runRatematrixMultiMCMC_C
std::string runRatematrixMultiMCMC_C(arma::mat X, int k, int p, arma::mat nodes, arma::umat des, arma::umat anc, arma::umat names_anc, arma::cube mapped_edge, arma::cube R, arma::vec mu, arma::mat sd, arma::cube Rcorr, arma::vec w_mu, arma::mat par_prior_mu, std::string den_mu, arma::mat w_sd, arma::mat par_prior_sd, std::string den_sd, arma::vec nu, arma::cube sigma, arma::vec v, std::string log_file, std::string mcmc_file, double prob_sample_root, double prob_sample_sd, int gen, arma::vec post_seq, int write_header);
RcppExport SEXP _ratematrix_runRatematrixMultiMCMC_C(SEXP XSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nodesSEXP, SEXP desSEXP, SEXP ancSEXP, SEXP names_ancSEXP, SEXP mapped_edgeSEXP, SEXP RSEXP, SEXP muSEXP, SEXP sdSEXP, SEXP RcorrSEXP, SEXP w_muSEXP, SEXP par_prior_muSEXP, SEXP den_muSEXP, SEXP w_sdSEXP, SEXP par_prior_sdSEXP, SEXP den_sdSEXP, SEXP nuSEXP, SEXP sigmaSEXP, SEXP vSEXP, SEXP log_fileSEXP, SEXP mcmc_fileSEXP, SEXP prob_sample_rootSEXP, SEXP prob_sample_sdSEXP, SEXP genSEXP, SEXP post_seqSEXP, SEXP write_headerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type des(desSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type anc(ancSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type names_anc(names_ancSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mapped_edge(mapped_edgeSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Rcorr(RcorrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w_mu(w_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type par_prior_mu(par_prior_muSEXP);
    Rcpp::traits::input_parameter< std::string >::type den_mu(den_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type w_sd(w_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type par_prior_sd(par_prior_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type den_sd(den_sdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< std::string >::type log_file(log_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmc_file(mcmc_fileSEXP);
    Rcpp::traits::input_parameter< double >::type prob_sample_root(prob_sample_rootSEXP);
    Rcpp::traits::input_parameter< double >::type prob_sample_sd(prob_sample_sdSEXP);
    Rcpp::traits::input_parameter< int >::type gen(genSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type post_seq(post_seqSEXP);
    Rcpp::traits::input_parameter< int >::type write_header(write_headerSEXP);
    rcpp_result_gen = Rcpp::wrap(runRatematrixMultiMCMC_C(X, k, p, nodes, des, anc, names_anc, mapped_edge, R, mu, sd, Rcorr, w_mu, par_prior_mu, den_mu, w_sd, par_prior_sd, den_sd, nu, sigma, v, log_file, mcmc_file, prob_sample_root, prob_sample_sd, gen, post_seq, write_header));
    return rcpp_result_gen;
END_RCPP
}
// runRatematrixMCMC_jointMk_C
std::string runRatematrixMCMC_jointMk_C(arma::mat X, arma::mat datMk, arma::uword k, arma::uword p, arma::vec nodes, arma::uword n_tips, arma::uvec des, arma::uvec anc, arma::uvec names_anc, arma::mat mapped_edge, arma::mat edge_mat, arma::uword n_nodes, arma::mat Q, double w_Q, std::string model_Q, int root_type, std::string den_Q, arma::vec par_prior_Q, arma::cube R, arma::vec mu, arma::mat sd, arma::cube Rcorr, arma::vec w_mu, arma::mat par_prior_mu, std::string den_mu, arma::mat w_sd, arma::mat par_prior_sd, std::string den_sd, arma::vec nu, arma::cube sigma, arma::vec v, std::string log_file, std::string mcmc_file, std::string Q_mcmc_file, arma::vec par_prob, arma::uword gen, arma::vec post_seq, int write_header, arma::uword sims_limit);
RcppExport SEXP _ratematrix_runRatematrixMCMC_jointMk_C(SEXP XSEXP, SEXP datMkSEXP, SEXP kSEXP, SEXP pSEXP, SEXP nodesSEXP, SEXP n_tipsSEXP, SEXP desSEXP, SEXP ancSEXP, SEXP names_ancSEXP, SEXP mapped_edgeSEXP, SEXP edge_matSEXP, SEXP n_nodesSEXP, SEXP QSEXP, SEXP w_QSEXP, SEXP model_QSEXP, SEXP root_typeSEXP, SEXP den_QSEXP, SEXP par_prior_QSEXP, SEXP RSEXP, SEXP muSEXP, SEXP sdSEXP, SEXP RcorrSEXP, SEXP w_muSEXP, SEXP par_prior_muSEXP, SEXP den_muSEXP, SEXP w_sdSEXP, SEXP par_prior_sdSEXP, SEXP den_sdSEXP, SEXP nuSEXP, SEXP sigmaSEXP, SEXP vSEXP, SEXP log_fileSEXP, SEXP mcmc_fileSEXP, SEXP Q_mcmc_fileSEXP, SEXP par_probSEXP, SEXP genSEXP, SEXP post_seqSEXP, SEXP write_headerSEXP, SEXP sims_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type datMk(datMkSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_tips(n_tipsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type des(desSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type anc(ancSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type names_anc(names_ancSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mapped_edge(mapped_edgeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type edge_mat(edge_matSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_nodes(n_nodesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type w_Q(w_QSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_Q(model_QSEXP);
    Rcpp::traits::input_parameter< int >::type root_type(root_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type den_Q(den_QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par_prior_Q(par_prior_QSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Rcorr(RcorrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w_mu(w_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type par_prior_mu(par_prior_muSEXP);
    Rcpp::traits::input_parameter< std::string >::type den_mu(den_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type w_sd(w_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type par_prior_sd(par_prior_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type den_sd(den_sdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< std::string >::type log_file(log_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type mcmc_file(mcmc_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type Q_mcmc_file(Q_mcmc_fileSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par_prob(par_probSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type gen(genSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type post_seq(post_seqSEXP);
    Rcpp::traits::input_parameter< int >::type write_header(write_headerSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type sims_limit(sims_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(runRatematrixMCMC_jointMk_C(X, datMk, k, p, nodes, n_tips, des, anc, names_anc, mapped_edge, edge_mat, n_nodes, Q, w_Q, model_Q, root_type, den_Q, par_prior_Q, R, mu, sd, Rcorr, w_mu, par_prior_mu, den_mu, w_sd, par_prior_sd, den_sd, nu, sigma, v, log_file, mcmc_file, Q_mcmc_file, par_prob, gen, post_seq, write_header, sims_limit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ratematrix_makeSimmapMappedEdge", (DL_FUNC) &_ratematrix_makeSimmapMappedEdge, 11},
    {"_ratematrix_makeSimmapMaps", (DL_FUNC) &_ratematrix_makeSimmapMaps, 11},
    {"_ratematrix_logLikMk_C", (DL_FUNC) &_ratematrix_logLikMk_C, 10},
    {"_ratematrix_logLikPrunningMCMC_C", (DL_FUNC) &_ratematrix_logLikPrunningMCMC_C, 10},
    {"_ratematrix_runRatematrixMCMC_C", (DL_FUNC) &_ratematrix_runRatematrixMCMC_C, 28},
    {"_ratematrix_runRatematrixMultiMCMC_C", (DL_FUNC) &_ratematrix_runRatematrixMultiMCMC_C, 28},
    {"_ratematrix_runRatematrixMCMC_jointMk_C", (DL_FUNC) &_ratematrix_runRatematrixMCMC_jointMk_C, 39},
    {NULL, NULL, 0}
};

RcppExport void R_init_ratematrix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
